# Makefile for the STM32L151C8 Cortex M3 medium-density microcontroller

.SUFFIXES:


# CPU folder
CONTIKI_CPU = $(CONTIKI)/cpu/arm/stm32l1

# Source folders for Contiki CPU files, ARM CMSIS and STM32L1 libraries
CONTIKI_CPU_DIRS = . \
		../common/CMSIS			\
		$(CONTIKI_MCU_DIRS)

# Source files: proprietary sources for startup. Refer to CMSIS docs.
PROP_SYS_ARCH_C = system_stm32l1xx.c
PROP_SYS_ARCH_S = startup_stm32l1xx_md.s


ifndef IAR
  GCC = 1
endif


# Source files: Contiki arch source files
CONTIKI_CPU_ARCH = \
		clock.c				\
		watchdog.c			\
		lpm-arch.c			\
		rtimer-arch.c		\
		syscalls.c	

ifdef GCC 
  CONTIKI_CPU_PORT = #syscalls.c
  STM32_TOOLS ?= $(CONTIKI)/tools/stm32
  GCC_BINS ?= $(STM32_TOOLS)/gcc-arm-none-eabi/bin
else
  CONTIKI_CPU_PORT = 
endif


# To be implemented
ELFLOADER = 

# Source files: STM32L1 libraries
CONTIKI_MCU_DIRS = \
		STM32L1xx_HAL_Driver/Inc				\
		STM32L1xx_HAL_Driver/Src				\
		../../stm32_common/					\
		../../stm32_common/STM32_USB_Device_Library/Core/Inc	\
		../../stm32_common/STM32_USB_Device_Library/Core/Src	\
		../../stm32_common/STM32_USB_Device_Library/Class/CDC/Inc	\
		../../stm32_common/STM32_USB_Device_Library/Class/CDC/Src

FULL_MCU_DIRS = ${wildcard ${addprefix $(CONTIKI_CPU)/, $(CONTIKI_MCU_DIRS)}}
CONTIKI_MCU_SOURCEFILES = ${foreach d, $(FULL_MCU_DIRS), ${subst ${d}/,,${wildcard $(d)/*.c}}}


# Add CPU folder to search path for .s (assembler) files
ifdef GCC
  vpath %.s $(CONTIKI_CPU)/arm-gcc
else
  vpath %.s $(CONTIKI_CPU)/arm-std
endif

# Include all files above
ssubst = ${patsubst %.s,%.o,${patsubst %.s79,%.o,$(1)}}
CONTIKI_SOURCEFILES += $(PROP_SYS_ARCH_C) $(CONTIKI_CPU_ARCH) $(CONTIKI_CPU_PORT) $(ELFLOADER)  $(CONTIKI_MCU_SOURCEFILES)
PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}
PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(PROP_SYS_ARCH_S)}}
#CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(PROP_SYS_ARCH_S)}}


# Defines common for IAR and GCC ------------------------------------------------

CFLAGS += \
	-DUSE_HAL_DRIVER		\
	-DSTM32L151xB			\
	-DLOW_POWER_MODE_ENABLE

### Compiler definitions
GCC	= 1
CC	= $(GCC_BINS)/arm-none-eabi-gcc
#LD	= $(GCC_BINS)/arm-none-eabi-ld
LD	= $(GCC_BINS)/arm-none-eabi-gcc
SIZE	= $(GCC_BINS)/arm-none-eabi-size
AS	= $(GCC_BINS)/arm-none-eabi-as
AR	= $(GCC_BINS)/arm-none-eabi-ar
NM	= $(GCC_BINS)/arm-none-eabi-nm
OBJCOPY	= $(GCC_BINS)/arm-none-eabi-objcopy
STRIP	= $(GCC_BINS)/arm-none-eabi-strip
GDB	= $(GCC_BINS)/arm-none-eabi-gdb

ASFLAGS += -mcpu=cortex-m3 -mthumb

CFLAGS += \
	-I.									\
	-I$(CONTIKI)/core					\
	-I$(CONTIKI_CPU)					\
	-I$(CONTIKI)/platform/$(TARGET)		\
	${addprefix -I,$(APPDIRS)}			\
	${addprefix -I,$(CONTIKI_CPU_DIRS)}	\
	-Wall -g						\
	-mcpu=cortex-m3						\
	-mthumb								\
	-mfix-cortex-m3-ldrd				\
	-std=gnu99							\
	-Wno-strict-aliasing				\
	-Wno-pointer-sign					\
	-Wno-unused-function				\
	-Wno-unused-variable				\
	-Wno-unused-but-set-variable


LDLIBS = -Wl,--no-whole-archive -lc -lm

LDFLAGS += \
	-L$(CONTIKI_CPU)/arm-gcc				\
	-T$(LDSCRIPT)						\
	-mcpu=cortex-m3						\
	-mthumb							\
	-mfloat-abi=soft					\
	--specs=nosys.specs					\
	-Wl,-Map=$(OBJECTDIR)/contiki-$(TARGET).map -Xlinker --cref	\
	-g -Os	\
	-Wl,--whole-archive


  CFLAGS += -DREDIRECT_STDIO



  CFLAGS += -Os -ffunction-sections -fdata-sections -fmessage-length=0 -fsigned-char
  LDFLAGS += -Wl,--gc-sections --specs=nano.specs
  LDFLAGS += -Wl,--undefined=_reset_vector__,--undefined=InterruptVectors,--undefined=_copy_data_init__,--undefined=_clear_bss_init__,--undefined=_end_of_init__



# Build rules ------------------------------------------------------------------
CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_CE=yes
CUSTOM_RULE_C_TO_CO=yes
CUSTOM_RULE_C_TO_O=yes
CUSTOM_RULE_S_TO_OBJECTDIR_O=yes
CUSTOM_RULE_LINK=yes

%.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@

%.o: %.s
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -c $< -o $@\

define FINALIZE_CYGWIN_DEPENDENCY
  sed -e 's/ \([A-Z]\):\\/ \/cygdrive\/\L\1\//' -e 's/\\\([^ ]\)/\/\1/g' \
	<$(@:.o=.P) >$(@:.o=.d); \
  rm -f $(@:.o=.P)
endef

$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@

$(OBJECTDIR)/%.o: %.s | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) $< -o $@

%.co: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c -DAUTOSTART_ENABLE -c $< -o $@

%.ce: %.o
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) --relocatable -T $(CONTIKI_CPU)/merge-rodata.ld $< -o $@ $(LDLIBS)
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

%-stripped.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip $@

%-stripped.o: %.o
	$(STRIP) --strip $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(TRACE_AS)
	$(Q)$(AS) -o $(notdir $(<:.S=.o)) $<

ifdef IAR
  %.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUPFOLDER) # $(OBJECTDIR)/empty-symbols.o
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) -o $@ $(filter-out %.a,$^) $(filter %.a,$^) $(LDLIBS)
else
  CONTIKI_CPU_OBJS=$(CONTIKI_CPU_PORT:%.c=$(OBJECTDIR)/%.o)
  %.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a $(OBJECTDIR)/symbols.o
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} -Wl,-\( ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-\) $(CONTIKI_CPU_OBJS) -o $@ $(LDLIBS)
	@echo >> $(OBJECTDIR)/contiki-$(TARGET).map
	$(Q)$(SIZE) $(SIZEFLAGS) $@ >> $(OBJECTDIR)/contiki-$(TARGET).map
endif

%.ihex: %.$(TARGET)
	$(Q)$(OBJCOPY) -O ihex $^ $@

%.hex: %.ihex
	#@rm $*.hex
	@mv -f $*.ihex $*.hex

%.bin: %.$(TARGET)
	$(Q)$(OBJCOPY) -O binary $^ $@

.PHONY: symbols.c

symbols.c:
	$(Q)cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	$(Q)cp ${CONTIKI}/tools/empty-symbols.h symbols.h

# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
$(OBJECTDIR)/elfloader.o: 
	echo -n >$@

